{"ast":null,"code":"var _jsxFileName = \"/Users/brianbrown/Documents/AIDataVizApp/MapData/frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, useMapEvents } from 'react-leaflet';\nimport axios from 'axios';\n\n// Component to handle zoom events and control county visibility\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ZoomHandler({\n  setShowCounties\n}) {\n  _s();\n  const mapEvents = useMapEvents({\n    zoomend: () => {\n      const currentZoom = mapEvents.getZoom();\n      setShowCounties(currentZoom >= 6);\n    }\n  });\n  return null;\n}\n_s(ZoomHandler, \"zj0tpqBiVyCrUJI2Y40fUpSivAw=\", false, function () {\n  return [useMapEvents];\n});\n_c = ZoomHandler;\nfunction MapComponent() {\n  _s2();\n  const [statesData, setStatesData] = useState(null);\n  const [countiesData, setCountiesData] = useState(null);\n  const [showCounties, setShowCounties] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Center of contiguous US\n  const center = [39.8283, -98.5795];\n  const zoom = 4;\n\n  // Style for state boundaries\n  const stateStyle = {\n    color: '#000',\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0\n  };\n\n  // Style for county boundaries\n  const countyStyle = {\n    color: '#666',\n    weight: 0.5,\n    opacity: 1,\n    fillOpacity: 0\n  };\n  useEffect(() => {\n    // Fetch states data\n    const fetchStates = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/geographic/states?include_geometry=true');\n        setStatesData(response.data);\n      } catch (err) {\n        setError('Failed to fetch states data');\n        console.error('Error fetching states data:', err);\n      }\n    };\n\n    // Fetch counties data\n    const fetchCounties = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/geographic/counties?include_geometry=true');\n        setCountiesData(response.data);\n      } catch (err) {\n        setError('Failed to fetch counties data');\n        console.error('Error fetching counties data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStates();\n    fetchCounties();\n  }, []);\n  if (loading && !statesData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading map data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: zoom,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      zoomControl: true,\n      doubleClickZoom: true,\n      scrollWheelZoom: true,\n      dragging: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), statesData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: statesData,\n        style: stateStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), showCounties && countiesData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: countiesData,\n        style: countyStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ZoomHandler, {\n        setShowCounties: setShowCounties\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s2(MapComponent, \"bh6/fUy2hifbtVH7qxYkwf/1s5A=\");\n_c2 = MapComponent;\nexport default MapComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"ZoomHandler\");\n$RefreshReg$(_c2, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","GeoJSON","useMapEvents","axios","jsxDEV","_jsxDEV","ZoomHandler","setShowCounties","_s","mapEvents","zoomend","currentZoom","getZoom","_c","MapComponent","_s2","statesData","setStatesData","countiesData","setCountiesData","showCounties","loading","setLoading","error","setError","center","zoom","stateStyle","color","weight","opacity","fillOpacity","countyStyle","fetchStates","response","get","data","err","console","fetchCounties","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","url","attribution","_c2","$RefreshReg$"],"sources":["/Users/brianbrown/Documents/AIDataVizApp/MapData/frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, useMapEvents } from 'react-leaflet';\nimport axios from 'axios';\n\n// Component to handle zoom events and control county visibility\nfunction ZoomHandler({ setShowCounties }) {\n  const mapEvents = useMapEvents({\n    zoomend: () => {\n      const currentZoom = mapEvents.getZoom();\n      setShowCounties(currentZoom >= 6);\n    }\n  });\n  \n  return null;\n}\n\nfunction MapComponent() {\n  const [statesData, setStatesData] = useState(null);\n  const [countiesData, setCountiesData] = useState(null);\n  const [showCounties, setShowCounties] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Center of contiguous US\n  const center = [39.8283, -98.5795];\n  const zoom = 4;\n\n  // Style for state boundaries\n  const stateStyle = {\n    color: '#000',\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0\n  };\n\n  // Style for county boundaries\n  const countyStyle = {\n    color: '#666',\n    weight: 0.5,\n    opacity: 1,\n    fillOpacity: 0\n  };\n\n  useEffect(() => {\n    // Fetch states data\n    const fetchStates = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/geographic/states?include_geometry=true');\n        setStatesData(response.data);\n      } catch (err) {\n        setError('Failed to fetch states data');\n        console.error('Error fetching states data:', err);\n      }\n    };\n\n    // Fetch counties data\n    const fetchCounties = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/geographic/counties?include_geometry=true');\n        setCountiesData(response.data);\n      } catch (err) {\n        setError('Failed to fetch counties data');\n        console.error('Error fetching counties data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStates();\n    fetchCounties();\n  }, []);\n\n  if (loading && !statesData) {\n    return <div>Loading map data...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <MapContainer\n        center={center}\n        zoom={zoom}\n        style={{ height: '100%', width: '100%' }}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        \n        {/* Render states GeoJSON */}\n        {statesData && (\n          <GeoJSON \n            data={statesData} \n            style={stateStyle}\n          />\n        )}\n        \n        {/* Render counties GeoJSON only when zoomed in */}\n        {showCounties && countiesData && (\n          <GeoJSON \n            data={countiesData} \n            style={countyStyle}\n          />\n        )}\n        \n        {/* Component to handle zoom events */}\n        <ZoomHandler setShowCounties={setShowCounties} />\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default MapComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}